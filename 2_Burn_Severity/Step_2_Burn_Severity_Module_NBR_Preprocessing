////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////
////   Calculate pre_fire NBR to be used 
////   Author T. Mayer 5/22/25 Earth Hub 
////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var baseModule = require("users/tjm0042/dev:main.js");

var exportPath = 'projects/servir-sco-assets/assets/Rx_Fire';

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////
////  ROI
////  Choose the ROI of intrest
////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var ROI = ee.Geometry.Rectangle([-87.3343240593025, 34.330559383876356, -87.2897779319832, 34.363157285275136]);
/// Tapville: https://usfs.maps.arcgis.com/apps/webappviewer/index.html?id=b196b5958480421fa7b5ee2a6ce91d31

// National Forest	National Forests in Alabama
// Ranger District	Bankhead
// Burn Block Name	TAPSVILLE
// Burn Status	Completed
// Acres Burned	915
// Burn Date	03/08/2025
// Benefit of Burn	Hazardous fuel reduction

// var ROI = ee.FeatureCollection("users/tjm0042/PHD/BTAP_P1")
Map.centerObject(ROI);
Map.addLayer(ROI, {}, "ROI")


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////
////  Input Imagery
////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var LS8 = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2");
var LS7 = ee.ImageCollection("LANDSAT/LE07/C02/T2_L2");
var S2 = ee.ImageCollection("COPERNICUS/S2_SR_HARMONIZED")

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////
////  Select only your pre months
////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


var monthsList = [1,2,3,4,5, 6 ];    // <--- INPUT NEEDED: MONTH NUMBER
var yearsList = [2020];


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////
////  Extract Dates
////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var listofDates = [];

for (var i = 0; i<monthsList.length; i++) {
  // year is hardcoded for now because we know we will have one year at a time
  var startDate = ee.Date.fromYMD(yearsList[0], monthsList[i], 1);
  var dict = {
    'startDate': startDate,
    'endDate'  : startDate.advance(1, 'month').advance(-1, 'day')
  };
  listofDates.push(dict);
}
listofDates = ee.List(listofDates);
print("listofDates", listofDates)


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////
////  Landsat 8 Dancing
////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var l8FinalCollection =  ee.ImageCollection(
  baseModule.utils.timePeriodSelector(LS8, monthsList, yearsList, ROI)
).sort('system:time_start');

l8FinalCollection = l8FinalCollection.select(['SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'SR_B7', 'QA_PIXEL']);

l8FinalCollection = l8FinalCollection.map(function (img) {
  return img.rename(['blue', 'green', 'red', 'nir', 'swir1', 'swir2','QA_PIXEL']);
});


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////
////  Landsat 7 Dancing
////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var l7FinalCollection = ee.ImageCollection(
  baseModule.utils.timePeriodSelector(LS7, monthsList, yearsList, ROI)
).sort('system:time_start');

l7FinalCollection = l7FinalCollection.select(['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7', 'QA_PIXEL']);

l7FinalCollection = l7FinalCollection.map(function (img) {
  return img.rename(['blue', 'green', 'red', 'nir', 'swir1', 'swir2', 'QA_PIXEL']);
});


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////
////  Landsat 7 and 8 Merge Dancing
////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

print('l7FinalCollection', l7FinalCollection);
print('l8FinalCollection', l8FinalCollection);

var _landsatCollection = baseModule.routine.getL7L8ReducedImage(listofDates, l8FinalCollection, l7FinalCollection);
var landsatCollection = ee.ImageCollection(_landsatCollection);

// doing a median now since the getL7L8ReducedImage has maximum extent via the mosaic method
var landsatImage = landsatCollection.median();
// notice this still has QA_PIXEL; however this can be dropped since we already used the QA_PIXEL per image wise
print('landsatImage', landsatImage);
landsatImage = landsatImage.select(['red', 'green', 'blue', 'nir', 'swir1', 'swir2']).float();
var landsatIndices = baseModule.indices.calculateL7L8Indices(landsatImage).float();
print('landsatIndices', landsatIndices);

Map.addLayer(landsatImage.clip(ROI), {bands:['swir1', 'nir', 'red'], min:0.04, max:0.4}, 'landsatCollectionMedian');
Map.addLayer(landsatIndices.select("NBR").clip(ROI), {min:0.04, max:0.4}, 'landsatIndices');

// parameters to the function call are: image, description, region, scale, assetId
//baseModule.utils.exportImageAsset(landsatImage, 'LandsatComposite_NBR_pre_' + yearsList[0], ROI, 30, exportPath + '/LandsatComposite_NBR_pre_'+ yearsList[0]);
baseModule.utils.exportImageAsset(landsatIndices.select("NBR"), 'LandsatCompositeIndices_NBR_pre_' + yearsList[0], ROI, 30, exportPath + '/LandsatCompositeIndices_NBR_pre_' + yearsList[0]);


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////
////  Sentinel 2 Dancing
////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var s2FinalCollection =  ee.ImageCollection(
  baseModule.utils.timePeriodSelector(S2, monthsList, yearsList, ROI)
).sort('system:time_start');

s2FinalCollection = baseModule.routine.maskS2Collection(s2FinalCollection);
print('s2FinalCollection', s2FinalCollection);

var s2FinalImage = s2FinalCollection.median();
var s2Indices = baseModule.indices.calculateS2Indices(s2FinalImage).float();
s2FinalImage = s2FinalImage.select(['B4', 'B3', 'B2', 'B8', 'B11', 'B12'], ['red', 'green', 'blue', 'nir', 'swir1', 'swir2']).float();

print('s2FinalImage', s2FinalImage);
print('s2Indices', s2Indices);
Map.addLayer(s2FinalImage.clip(ROI), {bands:['swir1', 'nir', 'red'], min:0.01, max:0.4}, 's2CollectionMedian');
Map.addLayer(s2Indices.select("S2_NBR").clip(ROI), {}, 's2Indices');

//baseModule.utils.exportImageAsset(s2FinalImage, 'S2Composite_NBR_pre_' + yearsList[0], ROI, 30, exportPath + '/S2Composite_NBR_pre_' + yearsList[0]);
baseModule.utils.exportImageAsset(s2Indices.select("S2_NBR"), 'S2CompositeIndices_NBR_pre_' + yearsList[0], ROI, 30, exportPath + '/S2CompositeIndices_NBR_pre_' + yearsList[0]);


